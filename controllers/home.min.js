import Contents from"../models/home.js";import fs from"fs";import path from"path";const dirname=path.dirname(new URL(import.meta.url).pathname),uploadDirectory="./uploads";fs.existsSync("./uploads")||fs.mkdirSync("./uploads");export const getContent=async(req,res)=>{try{const contents=await Contents.findAll();res.send(contents)}catch(err){console.log(err)}};export const getContentsById=async(req,res)=>{try{const contents=await Contents.findAll({where:{id:req.params.id}});res.send(contents[0])}catch(err){console.log(err)}};export const createContents=async(req,res)=>{try{const uploadDir=path.join(dirname,"..","uploads");fs.existsSync(uploadDir)||fs.mkdirSync(uploadDir);const file=req.files.image,fileName=(new Date).getTime()+"-"+file.name;fs.writeFile(path.join(uploadDir,fileName),file.data,async err=>{if(err)res.status(500).json({error:"Server Error"});else try{const content={name:req.body.name,registration_fee:req.body.registration_fee,image:fileName,max_participant:req.body.max_participant,description:req.body.description};await Contents.create(content),res.json({message:"Content Created"})}catch(err){console.log(err),res.status(500).json({error:"Server Error"})}})}catch(err){console.log(err),res.status(500).json({error:"Server Error"})}};export const updateContents=async(req,res)=>{try{await Contents.update(req.body,{where:{id:req.params.id}}),res.json({message:"Contents Updated"})}catch(err){console.log(err)}};export const deleteContents=async(req,res)=>{try{await Contents.destroy({where:{id:req.params.id}}),res.json({message:"Contents Deleted"})}catch(err){console.log(err)}};